{"id":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","dependencies":[{"name":"C:\\github\\ScrollToTop\\package.json","includedInParent":true,"mtime":1565663589641},{"name":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../utils/templatize.js","loc":{"line":10,"column":66},"parent":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\lib\\legacy\\templatizer-behavior.js","resolved":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\lib\\utils\\templatize.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Templatizer = void 0;\n\nvar _templatize = require(\"../utils/templatize.js\");\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n// eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n *   _templatizerTemplate: HTMLTemplateElement,\n *   _parentModel: boolean,\n *   _instanceProps: Object,\n *   _forwardHostPropV2: Function,\n *   _notifyInstancePropV2: Function,\n *   ctor: function(new:TemplateInstanceBase, Object=)\n * }}\n */\nlet TemplatizerUser; // eslint-disable-line\n\n/**\n * The `Templatizer` behavior adds methods to generate instances of\n * templates that are each managed by an anonymous `PropertyEffects`\n * instance where data-bindings in the stamped template content are bound to\n * accessors on itself.\n *\n * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience\n * only.  For non-hybrid usage, the `Templatize` library\n * should be used instead.\n *\n * Example:\n *\n *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     this.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = this.stamp({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. light DOM\n *     dom(this).appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * Users of `Templatizer` may need to implement the following abstract\n * API's to determine how properties and paths from the host should be\n * forwarded into to instances:\n *\n *     _forwardHostPropV2: function(prop, value)\n *\n * Likewise, users may implement these additional abstract API's to determine\n * how instance-specific properties that change on the instance should be\n * forwarded out to the host, if necessary.\n *\n *     _notifyInstancePropV2: function(inst, prop, value)\n *\n * In order to determine which properties are instance-specific and require\n * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n * object containing keys for each instance prop, for example:\n *\n *     _instanceProps: {\n *       item: true,\n *       index: true\n *     }\n *\n * Any properties used in the template that are not defined in _instanceProp\n * will be forwarded out to the Templatize `owner` automatically.\n *\n * Users may also implement the following abstract function to show or\n * hide any DOM generated using `stamp`:\n *\n *     _showHideChildren: function(shouldHide)\n *\n * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n * as the implementations will need to differ from the callbacks required\n * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n * between versions 1.x and 2.x.\n *\n * @polymerBehavior\n */\n\nconst Templatizer = {\n  /**\n   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n   * for the provided template.  This method should be called once per\n   * template to prepare an element for stamping the template, followed\n   * by `stamp` to create new instances of the template.\n   *\n   * @param {!HTMLTemplateElement} template Template to prepare\n   * @param {boolean=} mutableData When `true`, the generated class will skip\n   *   strict dirty-checking for objects and arrays (always consider them to\n   *   be \"dirty\"). Defaults to false.\n   * @return {void}\n   * @this {TemplatizerUser}\n   */\n  templatize(template, mutableData) {\n    this._templatizerTemplate = template;\n    this.ctor = (0, _templatize.templatize)(template,\n    /** @type {!Polymer_PropertyEffects} */\n    this, {\n      mutableData: Boolean(mutableData),\n      parentModel: this._parentModel,\n      instanceProps: this._instanceProps,\n      forwardHostProp: this._forwardHostPropV2,\n      notifyInstanceProp: this._notifyInstancePropV2\n    });\n  },\n\n  /**\n   * Creates an instance of the template prepared by `templatize`.  The object\n   * returned is an instance of the anonymous class generated by `templatize`\n   * whose `root` property is a document fragment containing newly cloned\n   * template content, and which has property accessors corresponding to\n   * properties referenced in template bindings.\n   *\n   * @param {Object=} model Object containing initial property values to\n   *   populate into the template bindings.\n   * @return {TemplateInstanceBase} Returns the created instance of\n   * the template prepared by `templatize`.\n   * @this {TemplatizerUser}\n   */\n  stamp(model) {\n    return new this.ctor(model);\n  },\n\n  /**\n   * Returns the template \"model\" (`TemplateInstance`) associated with\n   * a given element, which serves as the binding scope for the template\n   * instance the element is contained in.  A template model should be used\n   * to manipulate data associated with this template instance.\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   * @this {TemplatizerUser}\n   */\n  modelForElement(el) {\n    return (0, _templatize.modelForElement)(this._templatizerTemplate, el);\n  }\n\n};\nexports.Templatizer = Templatizer;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":1,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":10,"column":92}},{"generated":{"line":21,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":12,"column":0}},{"generated":{"line":31,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":22,"column":0}},{"name":"TemplatizerUser","generated":{"line":31,"column":4},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":22,"column":4}},{"generated":{"line":31,"column":19},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":22,"column":0}},{"generated":{"line":31,"column":21},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":22,"column":21}},{"generated":{"line":33,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":24,"column":0}},{"generated":{"line":95,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":7}},{"name":"Templatizer","generated":{"line":95,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":13}},{"generated":{"line":95,"column":17},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":24}},{"generated":{"line":95,"column":20},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":27}},{"generated":{"line":96,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":87,"column":2}},{"name":"templatize","generated":{"line":109,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":2}},{"name":"templatize","generated":{"line":109,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":2}},{"generated":{"line":109,"column":12},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":12}},{"name":"template","generated":{"line":109,"column":13},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":13}},{"generated":{"line":109,"column":21},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":12}},{"name":"mutableData","generated":{"line":109,"column":23},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":23}},{"generated":{"line":109,"column":34},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":12}},{"generated":{"line":109,"column":36},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":100,"column":36}},{"generated":{"line":110,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":101,"column":4}},{"name":"_templatizerTemplate","generated":{"line":110,"column":9},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":101,"column":9}},{"generated":{"line":110,"column":29},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":101,"column":4}},{"name":"template","generated":{"line":110,"column":32},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":101,"column":32}},{"generated":{"line":110,"column":40},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":101,"column":4}},{"generated":{"line":111,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":102,"column":4}},{"name":"ctor","generated":{"line":111,"column":9},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":102,"column":9}},{"generated":{"line":111,"column":13},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":102,"column":4}},{"generated":{"line":111,"column":16},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":8}},{"name":"template","generated":{"line":111,"column":44},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":19}},{"generated":{"line":111,"column":52},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":8}},{"generated":{"line":112,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":29}},{"generated":{"line":113,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":70}},{"generated":{"line":113,"column":8},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":8}},{"generated":{"line":113,"column":10},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"name":"mutableData","generated":{"line":114,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":10}},{"name":"mutableData","generated":{"line":114,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":10}},{"generated":{"line":114,"column":17},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":21}},{"name":"Boolean","generated":{"line":114,"column":19},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":23}},{"generated":{"line":114,"column":26},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":30}},{"name":"mutableData","generated":{"line":114,"column":27},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":31}},{"generated":{"line":114,"column":38},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":104,"column":30}},{"generated":{"line":114,"column":39},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"name":"parentModel","generated":{"line":115,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":105,"column":10}},{"name":"parentModel","generated":{"line":115,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":105,"column":10}},{"generated":{"line":115,"column":17},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":105,"column":21}},{"generated":{"line":115,"column":19},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":105,"column":23}},{"name":"_parentModel","generated":{"line":115,"column":24},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":105,"column":28}},{"generated":{"line":115,"column":36},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"name":"instanceProps","generated":{"line":116,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":106,"column":10}},{"name":"instanceProps","generated":{"line":116,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":106,"column":10}},{"generated":{"line":116,"column":19},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":106,"column":23}},{"generated":{"line":116,"column":21},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":106,"column":25}},{"name":"_instanceProps","generated":{"line":116,"column":26},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":106,"column":30}},{"generated":{"line":116,"column":40},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"name":"forwardHostProp","generated":{"line":117,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":107,"column":10}},{"name":"forwardHostProp","generated":{"line":117,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":107,"column":10}},{"generated":{"line":117,"column":21},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":107,"column":25}},{"generated":{"line":117,"column":23},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":107,"column":27}},{"name":"_forwardHostPropV2","generated":{"line":117,"column":28},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":107,"column":32}},{"generated":{"line":117,"column":46},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"name":"notifyInstanceProp","generated":{"line":118,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":108,"column":10}},{"name":"notifyInstanceProp","generated":{"line":118,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":108,"column":10}},{"generated":{"line":118,"column":24},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":108,"column":28}},{"generated":{"line":118,"column":26},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":108,"column":30}},{"name":"_notifyInstancePropV2","generated":{"line":118,"column":31},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":108,"column":35}},{"generated":{"line":119,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":77}},{"generated":{"line":119,"column":5},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":103,"column":8}},{"generated":{"line":119,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":102,"column":4}},{"generated":{"line":120,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":110,"column":3}},{"generated":{"line":120,"column":3},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":27}},{"generated":{"line":122,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":112,"column":2}},{"name":"stamp","generated":{"line":135,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":2}},{"name":"stamp","generated":{"line":135,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":2}},{"generated":{"line":135,"column":7},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":7}},{"name":"model","generated":{"line":135,"column":8},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":8}},{"generated":{"line":135,"column":13},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":7}},{"generated":{"line":135,"column":15},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":125,"column":15}},{"generated":{"line":136,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":4}},{"generated":{"line":136,"column":11},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":11}},{"generated":{"line":136,"column":15},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":15}},{"name":"ctor","generated":{"line":136,"column":20},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":20}},{"generated":{"line":136,"column":24},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":11}},{"name":"model","generated":{"line":136,"column":25},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":25}},{"generated":{"line":136,"column":30},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":11}},{"generated":{"line":136,"column":31},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":126,"column":4}},{"generated":{"line":137,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":127,"column":3}},{"generated":{"line":137,"column":3},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":27}},{"generated":{"line":139,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":129,"column":2}},{"name":"modelForElement","generated":{"line":150,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":2}},{"name":"modelForElement","generated":{"line":150,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":2}},{"generated":{"line":150,"column":17},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":17}},{"name":"el","generated":{"line":150,"column":18},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":18}},{"generated":{"line":150,"column":20},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":17}},{"generated":{"line":150,"column":22},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":140,"column":22}},{"generated":{"line":151,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":4}},{"generated":{"line":151,"column":11},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":11}},{"generated":{"line":151,"column":44},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":27}},{"name":"_templatizerTemplate","generated":{"line":151,"column":49},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":32}},{"generated":{"line":151,"column":69},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":11}},{"name":"el","generated":{"line":151,"column":71},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":54}},{"generated":{"line":151,"column":73},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":11}},{"generated":{"line":151,"column":74},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":141,"column":4}},{"generated":{"line":152,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":142,"column":3}},{"generated":{"line":154,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":27}},{"generated":{"line":154,"column":1},"source":"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js","original":{"line":85,"column":7}}],"sources":{"../node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n *   _templatizerTemplate: HTMLTemplateElement,\n *   _parentModel: boolean,\n *   _instanceProps: Object,\n *   _forwardHostPropV2: Function,\n *   _notifyInstancePropV2: Function,\n *   ctor: function(new:TemplateInstanceBase, Object=)\n * }}\n */\nlet TemplatizerUser; // eslint-disable-line\n\n/**\n * The `Templatizer` behavior adds methods to generate instances of\n * templates that are each managed by an anonymous `PropertyEffects`\n * instance where data-bindings in the stamped template content are bound to\n * accessors on itself.\n *\n * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience\n * only.  For non-hybrid usage, the `Templatize` library\n * should be used instead.\n *\n * Example:\n *\n *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     this.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = this.stamp({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. light DOM\n *     dom(this).appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * Users of `Templatizer` may need to implement the following abstract\n * API's to determine how properties and paths from the host should be\n * forwarded into to instances:\n *\n *     _forwardHostPropV2: function(prop, value)\n *\n * Likewise, users may implement these additional abstract API's to determine\n * how instance-specific properties that change on the instance should be\n * forwarded out to the host, if necessary.\n *\n *     _notifyInstancePropV2: function(inst, prop, value)\n *\n * In order to determine which properties are instance-specific and require\n * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n * object containing keys for each instance prop, for example:\n *\n *     _instanceProps: {\n *       item: true,\n *       index: true\n *     }\n *\n * Any properties used in the template that are not defined in _instanceProp\n * will be forwarded out to the Templatize `owner` automatically.\n *\n * Users may also implement the following abstract function to show or\n * hide any DOM generated using `stamp`:\n *\n *     _showHideChildren: function(shouldHide)\n *\n * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n * as the implementations will need to differ from the callbacks required\n * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n * between versions 1.x and 2.x.\n *\n * @polymerBehavior\n */\nexport const Templatizer = {\n\n  /**\n   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n   * for the provided template.  This method should be called once per\n   * template to prepare an element for stamping the template, followed\n   * by `stamp` to create new instances of the template.\n   *\n   * @param {!HTMLTemplateElement} template Template to prepare\n   * @param {boolean=} mutableData When `true`, the generated class will skip\n   *   strict dirty-checking for objects and arrays (always consider them to\n   *   be \"dirty\"). Defaults to false.\n   * @return {void}\n   * @this {TemplatizerUser}\n   */\n  templatize(template, mutableData) {\n    this._templatizerTemplate = template;\n    this.ctor =\n        templatize(template, /** @type {!Polymer_PropertyEffects} */ (this), {\n          mutableData: Boolean(mutableData),\n          parentModel: this._parentModel,\n          instanceProps: this._instanceProps,\n          forwardHostProp: this._forwardHostPropV2,\n          notifyInstanceProp: this._notifyInstancePropV2\n        });\n  },\n\n  /**\n   * Creates an instance of the template prepared by `templatize`.  The object\n   * returned is an instance of the anonymous class generated by `templatize`\n   * whose `root` property is a document fragment containing newly cloned\n   * template content, and which has property accessors corresponding to\n   * properties referenced in template bindings.\n   *\n   * @param {Object=} model Object containing initial property values to\n   *   populate into the template bindings.\n   * @return {TemplateInstanceBase} Returns the created instance of\n   * the template prepared by `templatize`.\n   * @this {TemplatizerUser}\n   */\n  stamp(model) {\n    return new this.ctor(model);\n  },\n\n  /**\n   * Returns the template \"model\" (`TemplateInstance`) associated with\n   * a given element, which serves as the binding scope for the template\n   * instance the element is contained in.  A template model should be used\n   * to manipulate data associated with this template instance.\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   * @this {TemplatizerUser}\n   */\n  modelForElement(el) {\n    return modelForElement(this._templatizerTemplate, el);\n  }\n};\n"},"lineCount":null}},"error":null,"hash":"4ce50be1ee5ecd3d1aa8df2b6964a26c","cacheData":{"env":{}}}