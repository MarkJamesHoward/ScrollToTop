{"id":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","dependencies":[{"name":"C:\\github\\ScrollToTop\\package.json","includedInParent":true,"mtime":1565663589641},{"name":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../mixins/mutable-data.js","loc":{"line":10,"column":28},"parent":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\lib\\legacy\\mutable-data-behavior.js","resolved":"C:\\github\\ScrollToTop\\node_modules\\@polymer\\polymer\\lib\\mixins\\mutable-data.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionalMutableDataBehavior = exports.MutableDataBehavior = void 0;\n\nvar _mutableData = require(\"../mixins/mutable-data.js\");\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n\n(() => {\n  mutablePropertyChange = _mutableData.MutableData._mutablePropertyChange;\n})();\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\n\n\nconst MutableDataBehavior = {\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n\n};\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\n\nexports.MutableDataBehavior = MutableDataBehavior;\nconst OptionalMutableDataBehavior = {\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n\n};\nexports.OptionalMutableDataBehavior = OptionalMutableDataBehavior;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":1,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":12,"column":0}},{"name":"mutablePropertyChange","generated":{"line":19,"column":4},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":12,"column":4}},{"generated":{"line":19,"column":25},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":13,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":1},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":14,"column":1}},{"generated":{"line":22,"column":7},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":14,"column":7}},{"name":"mutablePropertyChange","generated":{"line":23,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":2}},{"name":"mutablePropertyChange","generated":{"line":23,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":2}},{"generated":{"line":23,"column":23},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":23}},{"name":"MutableData","generated":{"line":23,"column":26},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":26}},{"name":"_mutablePropertyChange","generated":{"line":23,"column":51},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":38}},{"generated":{"line":23,"column":73},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":15,"column":2}},{"generated":{"line":24,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":16,"column":1}},{"generated":{"line":24,"column":1},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":14,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":18,"column":0}},{"generated":{"line":64,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":7}},{"name":"MutableDataBehavior","generated":{"line":64,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":13}},{"generated":{"line":64,"column":25},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":32}},{"generated":{"line":64,"column":28},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":35}},{"generated":{"line":65,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":57,"column":2}},{"name":"_shouldPropertyChange","generated":{"line":83,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":2}},{"name":"_shouldPropertyChange","generated":{"line":83,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":2}},{"generated":{"line":83,"column":23},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":23}},{"name":"property","generated":{"line":83,"column":24},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":24}},{"generated":{"line":83,"column":32},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":23}},{"name":"value","generated":{"line":83,"column":34},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":34}},{"generated":{"line":83,"column":39},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":23}},{"name":"old","generated":{"line":83,"column":41},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":41}},{"generated":{"line":83,"column":44},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":23}},{"generated":{"line":83,"column":46},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":75,"column":46}},{"generated":{"line":84,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":4}},{"name":"mutablePropertyChange","generated":{"line":84,"column":11},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":11}},{"generated":{"line":84,"column":32},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"generated":{"line":84,"column":33},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":33}},{"generated":{"line":84,"column":37},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"name":"property","generated":{"line":84,"column":39},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":39}},{"generated":{"line":84,"column":47},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"name":"value","generated":{"line":84,"column":49},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":49}},{"generated":{"line":84,"column":54},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"name":"old","generated":{"line":84,"column":56},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":56}},{"generated":{"line":84,"column":59},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"generated":{"line":84,"column":61},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":61}},{"generated":{"line":84,"column":65},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":32}},{"generated":{"line":84,"column":66},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":4}},{"generated":{"line":85,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":77,"column":3}},{"generated":{"line":87,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":35}},{"generated":{"line":87,"column":1},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":7}},{"generated":{"line":88,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":80,"column":0}},{"generated":{"line":129,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7}},{"name":"OptionalMutableDataBehavior","generated":{"line":129,"column":6},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":13}},{"generated":{"line":129,"column":33},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":40}},{"generated":{"line":129,"column":36},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":43}},{"name":"properties","generated":{"line":130,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":2}},{"name":"properties","generated":{"line":130,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":2}},{"generated":{"line":130,"column":12},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":12}},{"generated":{"line":130,"column":14},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":14}},{"generated":{"line":131,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":122,"column":4}},{"name":"mutableData","generated":{"line":136,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":127,"column":4}},{"name":"mutableData","generated":{"line":136,"column":4},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":127,"column":4}},{"generated":{"line":136,"column":15},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":127,"column":15}},{"name":"Boolean","generated":{"line":136,"column":17},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":127,"column":17}},{"generated":{"line":137,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":14}},{"generated":{"line":137,"column":3},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":43}},{"generated":{"line":139,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":130,"column":2}},{"name":"_shouldPropertyChange","generated":{"line":157,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":2}},{"name":"_shouldPropertyChange","generated":{"line":157,"column":2},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":2}},{"generated":{"line":157,"column":23},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":23}},{"name":"property","generated":{"line":157,"column":24},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":24}},{"generated":{"line":157,"column":32},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":23}},{"name":"value","generated":{"line":157,"column":34},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":34}},{"generated":{"line":157,"column":39},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":23}},{"name":"old","generated":{"line":157,"column":41},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":41}},{"generated":{"line":157,"column":44},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":23}},{"generated":{"line":157,"column":46},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":148,"column":46}},{"generated":{"line":158,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":4}},{"name":"mutablePropertyChange","generated":{"line":158,"column":11},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":11}},{"generated":{"line":158,"column":32},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"generated":{"line":158,"column":33},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":33}},{"generated":{"line":158,"column":37},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"name":"property","generated":{"line":158,"column":39},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":39}},{"generated":{"line":158,"column":47},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"name":"value","generated":{"line":158,"column":49},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":49}},{"generated":{"line":158,"column":54},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"name":"old","generated":{"line":158,"column":56},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":56}},{"generated":{"line":158,"column":59},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"generated":{"line":158,"column":61},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":61}},{"name":"mutableData","generated":{"line":158,"column":66},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":66}},{"generated":{"line":158,"column":77},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":32}},{"generated":{"line":158,"column":78},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":4}},{"generated":{"line":159,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":150,"column":3}},{"generated":{"line":161,"column":0},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":43}},{"generated":{"line":161,"column":1},"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7}}],"sources":{"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { MutableData } from '../mixins/mutable-data.js';\n\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n(() => {\n  mutablePropertyChange = MutableData._mutablePropertyChange;\n})();\n\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\nexport const MutableDataBehavior = {\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n};\n\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\nexport const OptionalMutableDataBehavior = {\n\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n};\n"},"lineCount":null}},"error":null,"hash":"d673f10ddcb50692e4a79ca79f946738","cacheData":{"env":{}}}